// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SaaSEqt.eShop.Services.Catalog.API.Infrastructure;
using System;

namespace Catalog.API.Migrations.Catalog
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20180714113211_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CatalogBrand");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailableStock");

                    b.Property<int>("CatalogBrandId");

                    b.Property<int>("CatalogTypeId");

                    b.Property<string>("Description");

                    b.Property<int>("MaxStockThreshold");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("OnReorder");

                    b.Property<string>("PictureFileName");

                    b.Property<decimal>("Price");

                    b.Property<int>("RestockThreshold");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CatalogType");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BookableEndDateTime");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("Friday");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Monday");

                    b.Property<bool>("Saturday");

                    b.Property<Guid>("SchedulableCatalogItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.HasIndex("SchedulableCatalogItemId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowOnlineScheduling");

                    b.Property<int>("DefaultTimeLength");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("IndustryStandardCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price");

                    b.Property<Guid>("SchedulableCatalogTypeId");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId");

                    b.Property<double>("TaxRate");

                    b.HasKey("Id");

                    b.HasIndex("SchedulableCatalogTypeId");

                    b.ToTable("ServiceItem");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowOnlineScheduling");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ScheduleTypeId");

                    b.Property<Guid>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.ScheduleType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleType");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.Unavailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("Friday");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Monday");

                    b.Property<bool>("Saturday");

                    b.Property<Guid>("SchedulableCatalogItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.HasIndex("SchedulableCatalogItemId");

                    b.ToTable("Unavailability");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogItem", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogBrand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.Availability", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogItem")
                        .WithMany("Availibilities")
                        .HasForeignKey("SchedulableCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogItem", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogType", "SchedulableCatalogType")
                        .WithMany()
                        .HasForeignKey("SchedulableCatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogType", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.ScheduleType", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.Unavailability", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Catalog.API.Model.SchedulableCatalog.SchedulableCatalogItem")
                        .WithMany("Unavailabilities")
                        .HasForeignKey("SchedulableCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
