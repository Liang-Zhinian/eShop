// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SaaSEqt.eShop.Services.Sites.API.Infrastructure;
using System;

namespace Sites.API.Migrations.Sites
{
    [DbContext(typeof(SitesContext))]
    partial class SitesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Branding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Logo")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("PageColor1")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor3")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PageColor4")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId")
                        .IsUnique();

                    b.ToTable("Branding");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.LocationImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.ToTable("LocationImage");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("CanLoginAllLocations");

                    b.Property<string>("City");

                    b.Property<string>("CountryCode");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(4000)");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsMale");

                    b.Property<string>("LastName");

                    b.Property<string>("PostalCode");

                    b.Property<string>("PrimaryTelephone");

                    b.Property<string>("SecondaryTelephone");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("StateProvince");

                    b.Property<string>("StreetAddress");

                    b.Property<Guid>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.StaffLoginLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StaffId");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "StaffId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SiteId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLoginLocation");
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Branding", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site", "Site")
                        .WithOne("Branding")
                        .HasForeignKey("SaaSEqt.eShop.Services.Sites.API.Model.Branding", "SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Location", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site", "Site")
                        .WithMany("Locations")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SaaSEqt.eShop.Services.Sites.API.Model.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Country")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("StateProvince")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Location");

                            b1.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Location")
                                .WithOne("Address")
                                .HasForeignKey("SaaSEqt.eShop.Services.Sites.API.Model.Address", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SaaSEqt.eShop.Services.Sites.API.Model.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid?>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Location");

                            b1.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Location")
                                .WithOne("ContactInformation")
                                .HasForeignKey("SaaSEqt.eShop.Services.Sites.API.Model.ContactInformation", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SaaSEqt.eShop.Services.Sites.API.Model.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("Location");

                            b1.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Location")
                                .WithOne("Geolocation")
                                .HasForeignKey("SaaSEqt.eShop.Services.Sites.API.Model.Geolocation", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.LocationImage", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Location", "Location")
                        .WithMany("AdditionalLocationImages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Site", b =>
                {
                    b.OwnsOne("SaaSEqt.eShop.Services.Sites.API.Model.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("SiteId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("ContactName")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("EmailAddress")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PrimaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("SecondaryTelephone")
                                .HasColumnType("varchar(255)");

                            b1.ToTable("Site");

                            b1.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site")
                                .WithOne("ContactInformation")
                                .HasForeignKey("SaaSEqt.eShop.Services.Sites.API.Model.ContactInformation", "SiteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.Staff", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site", "Site")
                        .WithMany("Staffs")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaaSEqt.eShop.Services.Sites.API.Model.StaffLoginLocation", b =>
                {
                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaaSEqt.eShop.Services.Sites.API.Model.Staff", "Staff")
                        .WithMany("StaffLoginLocations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
